{"version":3,"sources":["webpack:///path---naming-rule-00e65cb414f67110da8d.js","webpack:///./.cache/json/naming-rule.json"],"names":["webpackJsonp","894","module","exports","data","post","id","html","fields","slug","prefix","frontmatter","title","subTitle","cover","childImageSharp","resize","src","author","footnote","site","siteMetadata","facebook","appId","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,GAAA,sIAAAC,KAAA,yxCAAAC,QAA28CC,KAAA,gBAAAC,OAAA,cAA6CC,aAAgBC,MAAA,oDAAAC,SAAA,GAAAC,OAAmFC,iBAAmBC,QAAUC,IAAA,oEAAyEC,QAAWZ,GAAA,+GAAAC,KAAA,sGAAgOY,UAAab,GAAA,iHAAAC,KAAA,0DAAwLa,MAASC,cAAgBC,UAAYC,MAAA,OAAcC,aAAgBf,KAAA","file":"path---naming-rule-00e65cb414f67110da8d.js","sourcesContent":["webpackJsonp([146948363262900],{\n\n/***/ 894:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"id\":\"/Users/jslee/Development/lighthouse-dev.github.io/content/posts/2018-01-31--naming-rule/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>今回は、変数名規約についてです！</p>\\n<p>変数名規約には大きく以下の三つがあります。</p>\\n<ul>\\n<li>ハンガリアン記法</li>\\n<li>キャメルケース(Camel Casing)</li>\\n<li>パスカルケース(Pascal Casing)</li>\\n</ul>\\n<p>各記法をシンプルに説明します！</p>\\n<br>\\n<h1 id=\\\"ハンガリアン記法\\\">ハンガリアン記法</h1>\\n<blockquote>\\n<p>intデータ型 + apple -> intApple</p>\\n</blockquote>\\n<p>Microsoftのハンガリアンエンジニアが使ったた変数名規約です。</p>\\n<p>変数のデータ型を変数名の前につける記法です。</p>\\n<p>例えば、<code class=\\\"language-text\\\">int型</code>の’number’という変数を宣言する時には、<code class=\\\"language-text\\\">intNumber</code>にします。</p>\\n<p>また、文字列である<code class=\\\"language-text\\\">name</code>という変数を宣言する時には、<code class=\\\"language-text\\\">strName</code>のように指定できます！</p>\\n<br>\\n<h1 id=\\\"キャメルケースcamel-casing\\\">キャメルケース(Camel Casing)</h1>\\n<blockquote>\\n<p>apple + tree -> appleTree</p>\\n</blockquote>\\n<p>基本的に小文字をを使って、単語と単語の間を大文字つける記法です。</p>\\n<p>ただし、一番最初の文字は、小文字を使います。</p>\\n<p>例えば、<code class=\\\"language-text\\\">appletree</code> という関数の場合は、関数名を <code class=\\\"language-text\\\">appleTree()</code> のように宣言する記法です。</p>\\n<br>\\n<h1 id=\\\"パスカルケースpascal-casing\\\">パスカルケース(Pascal Casing)</h1>\\n<blockquote>\\n<p>apple + tree -> AppleTree</p>\\n</blockquote>\\n<p>パスカルケースもキャメルケースと同じく小文字を使うが、単語と単語の間を大文字で</p>\\n<p>つける記法です。</p>\\n<p>ただし、一番最初の文字も大文字を使うというところがキャメルケースとの違いです！</p>\\n<p>例えば、<code class=\\\"language-text\\\">appletree</code> という関数の場合は、関数名を <code class=\\\"language-text\\\">AppleTre</code> のように宣言する記法です。</p>\",\"fields\":{\"slug\":\"/naming-rule/\",\"prefix\":\"2018-01-31\"},\"frontmatter\":{\"title\":\"変数ネーミングルール（変数名規約, Naming Rule, Naming Convention)\",\"subTitle\":\"\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/code-logo-518a8cbdd46df924f7ecc3d77a7e4d54-160fa.png\"}}}}},\"author\":{\"id\":\"/Users/jslee/Development/lighthouse-dev.github.io/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>jslee</strong> <br>\\n福岡在住外国籍WEBエンジニア👋 <br>\\nPHPやVue.js、Angularなど書いてます！ 無類のラーメン好き🍜</p>\"},\"footnote\":{\"id\":\"/Users/jslee/Development/lighthouse-dev.github.io/content/parts/footnote.md absPath of file >>> MarkdownRemark\",\"html\":\"<ul>\\n<li><a href=\\\"../\\\">lighthouse.log</a></li>\\n</ul>\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"\"}}}},\"pathContext\":{\"slug\":\"/naming-rule/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---naming-rule-00e65cb414f67110da8d.js","module.exports = {\"data\":{\"post\":{\"id\":\"/Users/jslee/Development/lighthouse-dev.github.io/content/posts/2018-01-31--naming-rule/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>今回は、変数名規約についてです！</p>\\n<p>変数名規約には大きく以下の三つがあります。</p>\\n<ul>\\n<li>ハンガリアン記法</li>\\n<li>キャメルケース(Camel Casing)</li>\\n<li>パスカルケース(Pascal Casing)</li>\\n</ul>\\n<p>各記法をシンプルに説明します！</p>\\n<br>\\n<h1 id=\\\"ハンガリアン記法\\\">ハンガリアン記法</h1>\\n<blockquote>\\n<p>intデータ型 + apple -> intApple</p>\\n</blockquote>\\n<p>Microsoftのハンガリアンエンジニアが使ったた変数名規約です。</p>\\n<p>変数のデータ型を変数名の前につける記法です。</p>\\n<p>例えば、<code class=\\\"language-text\\\">int型</code>の’number’という変数を宣言する時には、<code class=\\\"language-text\\\">intNumber</code>にします。</p>\\n<p>また、文字列である<code class=\\\"language-text\\\">name</code>という変数を宣言する時には、<code class=\\\"language-text\\\">strName</code>のように指定できます！</p>\\n<br>\\n<h1 id=\\\"キャメルケースcamel-casing\\\">キャメルケース(Camel Casing)</h1>\\n<blockquote>\\n<p>apple + tree -> appleTree</p>\\n</blockquote>\\n<p>基本的に小文字をを使って、単語と単語の間を大文字つける記法です。</p>\\n<p>ただし、一番最初の文字は、小文字を使います。</p>\\n<p>例えば、<code class=\\\"language-text\\\">appletree</code> という関数の場合は、関数名を <code class=\\\"language-text\\\">appleTree()</code> のように宣言する記法です。</p>\\n<br>\\n<h1 id=\\\"パスカルケースpascal-casing\\\">パスカルケース(Pascal Casing)</h1>\\n<blockquote>\\n<p>apple + tree -> AppleTree</p>\\n</blockquote>\\n<p>パスカルケースもキャメルケースと同じく小文字を使うが、単語と単語の間を大文字で</p>\\n<p>つける記法です。</p>\\n<p>ただし、一番最初の文字も大文字を使うというところがキャメルケースとの違いです！</p>\\n<p>例えば、<code class=\\\"language-text\\\">appletree</code> という関数の場合は、関数名を <code class=\\\"language-text\\\">AppleTre</code> のように宣言する記法です。</p>\",\"fields\":{\"slug\":\"/naming-rule/\",\"prefix\":\"2018-01-31\"},\"frontmatter\":{\"title\":\"変数ネーミングルール（変数名規約, Naming Rule, Naming Convention)\",\"subTitle\":\"\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/code-logo-518a8cbdd46df924f7ecc3d77a7e4d54-160fa.png\"}}}}},\"author\":{\"id\":\"/Users/jslee/Development/lighthouse-dev.github.io/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>jslee</strong> <br>\\n福岡在住外国籍WEBエンジニア👋 <br>\\nPHPやVue.js、Angularなど書いてます！ 無類のラーメン好き🍜</p>\"},\"footnote\":{\"id\":\"/Users/jslee/Development/lighthouse-dev.github.io/content/parts/footnote.md absPath of file >>> MarkdownRemark\",\"html\":\"<ul>\\n<li><a href=\\\"../\\\">lighthouse.log</a></li>\\n</ul>\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"\"}}}},\"pathContext\":{\"slug\":\"/naming-rule/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/naming-rule.json\n// module id = 894\n// module chunks = 146948363262900"],"sourceRoot":""}